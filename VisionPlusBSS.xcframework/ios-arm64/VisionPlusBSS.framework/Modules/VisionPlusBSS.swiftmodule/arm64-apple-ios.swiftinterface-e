// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name VisionPlusBSS
import AuthenticationServices
import CoreGraphics
import CoreLocation
import Foundation
import SafariServices
import Swift
import UIKit.UIGeometry
import UIKit
@_exported import VisionPlusBSS
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum VPUserDefaultKeys : Swift.String {
  case location
  case ip
  case country
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct EmergencyModeModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConfigModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VPAuthProvider : Swift.String {
  case apple
  case google
  case facebook
  case email
  case phone
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class VisionPlusBSS {
  public static let shared: VisionPlusBSS.VisionPlusBSS
  weak public var authDelegate: (any VisionPlusBSS.VPAuthDelegate)?
  weak public var eventDelegate: (any VisionPlusBSS.VPEventDelegate)?
  public var localize: Swift.String
  public var key: Swift.String? {
    get
    set
  }
  public static var publicConfig: VisionPlusBSS.ConfigModel
  public static var countriesConfig: [VisionPlusBSS.CountryModel]
  @objc deinit
}
extension VisionPlusBSS.VisionPlusBSS {
  public func loginViewController() -> UIKit.UIViewController
  public func presentLoginScreen(_ vc: UIKit.UIViewController, animated: Swift.Bool = true)
  public func pushLoginScreen(_ navigation: UIKit.UINavigationController?, animated: Swift.Bool = true)
  public func registerViewController() -> UIKit.UIViewController
  public func presentRegisterScreen(_ vc: UIKit.UIViewController, animated: Swift.Bool = true)
  public func pushRegisterScreen(_ navigation: UIKit.UINavigationController?, animated: Swift.Bool = true)
  public func verifyLinkViewController(sessionId: Swift.String, identity: Swift.String) -> UIKit.UIViewController
  public func presentVerifyLinkScreen(_ vc: UIKit.UIViewController, animated: Swift.Bool = true, sessionId: Swift.String, identity: Swift.String)
  public func pushVerifyLinkScreen(_ navigation: UIKit.UINavigationController?, animated: Swift.Bool = true, sessionId: Swift.String, identity: Swift.String)
  public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
}
public protocol VPAuthDelegate : AnyObject {
  func didAuthenticationSuccess(token: Swift.String, provider: VisionPlusBSS.VPAuthProvider, info: [Swift.String : Any])
  func didAuthenticationFailure(error: any Swift.Error)
}
public protocol VPEventDelegate : AnyObject {
  func eventListener(eventName: Swift.String, payload: [Swift.String : Any])
}
public struct CountryModel : Swift.Decodable, Swift.Equatable {
  public static func == (a: VisionPlusBSS.CountryModel, b: VisionPlusBSS.CountryModel) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
extension VisionPlusBSS.VPUserDefaultKeys : Swift.Equatable {}
extension VisionPlusBSS.VPUserDefaultKeys : Swift.Hashable {}
extension VisionPlusBSS.VPUserDefaultKeys : Swift.RawRepresentable {}
extension VisionPlusBSS.VPAuthProvider : Swift.Equatable {}
extension VisionPlusBSS.VPAuthProvider : Swift.Hashable {}
extension VisionPlusBSS.VPAuthProvider : Swift.RawRepresentable {}
